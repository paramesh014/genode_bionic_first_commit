#
# Build
#

build {
	core init
	drivers/timer
	drivers/framebuffer drivers/pci drivers/input drivers/audio_out
	server/mixer
	app/avplay drivers/acpi
}

#
# Download media file
#

set media_url "ftp://ftp.untergrund.net/users/ae/dhstv/escape-chotro.mp4"
if {![file exists bin/mediafile]} {
	puts "downloading media file from $media_url"
	catch { exec wget -O bin/mediafile $media_url }
}

#
# Generate config
#

create_boot_directory

set config {
<config>
	<parent-provides>
		<service name="ROM"/>
		<service name="RAM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="CAP"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
		<service name="SIGNAL"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
}

append_if [have_spec sdl] config {
	<start name="fb_sdl">
		<resource name="RAM" quantum="4M"/>
		<provides>
			<service name="Input"/>
			<service name="Framebuffer"/>
		</provides>
	</start>}

append_if [have_spec acpi] config {
	<start name="acpi">
		<resource name="RAM" quantum="2M"/>
		<binary name="acpi_drv"/>
		<provides>
			<service name="PCI"/>
			<service name="IRQ" />
		</provides>
		<route>
			<any-service> <parent/> <any-child /> </any-service>
		</route>
	</start>
}

append_if [expr [have_spec pci] && ![have_spec acpi]] config {
	<start name="pci_drv">
		<resource name="RAM" quantum="2M"/>
		<provides>
			<service name="PCI"/>
		</provides>
	</start>
}

append_if [have_spec framebuffer] config {
	<start name="fb_drv">
		<resource name="RAM" quantum="4M"/>
		<provides><service name="Framebuffer"/></provides>
	</start>}

append_if [have_spec ps2] config {
	<start name="ps2_drv">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Input"/></provides>
	</start> }

append config {
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>
	<start name="audio_out_drv">
		<resource name="RAM" quantum="6M"/>
		<route>
			<any-service> <any-child /> <parent /></any-service>
		</route>
		<provides>
			<service name="Audio_out"/>
		</provides>
	</start>
	<start name="mixer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Audio_out"/></provides>
		<route>
			<service name="Audio_out"> <child name="audio_out_drv"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>
	<start name="avplay">
		<resource name="RAM" quantum="64M"/>
		<config>
			<arg value="avplay"/>
			<arg value="mediafile"/>
			<sdl_audio_volume value="100"/>
			<libc stdout="/dev/log" stderr="/dev/log">
				<vfs>
					<dir name="dev"> <log/> </dir>
					<rom name="mediafile"/>
				</vfs>
			</libc>
		</config>
		<route>
			<service name="PCI"> <any-child /> </service>
			<service name="Audio_out"> <child name="mixer"/> </service>
			<any-service> <parent/> <any-child /> </any-service>
		</route>
	</start>
</config>
}

install_config $config

#
# Boot modules
#

set boot_modules {
	core init timer audio_out_drv mixer avplay
	ld.lib.so libc.lib.so libm.lib.so pthread.lib.so zlib.lib.so sdl.lib.so
	avfilter.lib.so avutil.lib.so avcodec.lib.so avformat.lib.so swscale.lib.so
	mediafile
}

lappend_if [have_spec       linux] boot_modules fb_sdl
lappend_if [have_spec         pci] boot_modules pci_drv
lappend_if [have_spec         pci] boot_modules acpi_drv
lappend_if [have_spec framebuffer] boot_modules fb_drv
lappend_if [have_spec         ps2] boot_modules ps2_drv

build_boot_image $boot_modules

append qemu_args " -m 256 -soundhw all"

run_genode_until forever

