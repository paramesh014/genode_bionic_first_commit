+++ src/app/virtualbox/include/VBox/vmm/hwacc_vmx.h
@@ -1338,10 +1338,10 @@
        ".byte    0xF3, 0x0F, 0xC7, 0x34, 0x24  # VMXON [esp]    \n\t"
        "ja       2f                                             \n\t"
        "je       1f                                             \n\t"
-       "movl     $"STR(VERR_VMX_INVALID_VMXON_PTR)", %0         \n\t"
+       "movl     $" STR(VERR_VMX_INVALID_VMXON_PTR)", %0        \n\t"
        "jmp      2f                                             \n\t"
        "1:                                                      \n\t"
-       "movl     $"STR(VERR_VMX_GENERIC)", %0                   \n\t"
+       "movl     $" STR(VERR_VMX_GENERIC)", %0                  \n\t"
        "2:                                                      \n\t"
        "add      $8, %%esp                                      \n\t"
        :"=rm"(rc)
@@ -1418,7 +1418,7 @@
        "push    %2                                              \n\t"
        ".byte   0x66, 0x0F, 0xC7, 0x34, 0x24  # VMCLEAR [esp]   \n\t"
        "jnc     1f                                              \n\t"
-       "movl    $"STR(VERR_VMX_INVALID_VMCS_PTR)", %0           \n\t"
+       "movl    $" STR(VERR_VMX_INVALID_VMCS_PTR)", %0          \n\t"
        "1:                                                      \n\t"
        "add     $8, %%esp                                       \n\t"
        :"=rm"(rc)
@@ -1466,7 +1466,7 @@
        "push    %2                                              \n\t"
        ".byte   0x0F, 0xC7, 0x34, 0x24  # VMPTRLD [esp]         \n\t"
        "jnc     1f                                              \n\t"
-       "movl    $"STR(VERR_VMX_INVALID_VMCS_PTR)", %0           \n\t"
+       "movl    $" STR(VERR_VMX_INVALID_VMCS_PTR)", %0          \n\t"
        "1:                                                      \n\t"
        "add     $8, %%esp                                       \n\t"
        :"=rm"(rc)
@@ -1520,10 +1520,10 @@
        ".byte  0x0F, 0x79, 0xC2        # VMWRITE eax, edx       \n\t"
        "ja     2f                                               \n\t"
        "je     1f                                               \n\t"
-       "movl   $"STR(VERR_VMX_INVALID_VMCS_PTR)", %0            \n\t"
+       "movl   $" STR(VERR_VMX_INVALID_VMCS_PTR)", %0           \n\t"
        "jmp    2f                                               \n\t"
        "1:                                                      \n\t"
-       "movl   $"STR(VERR_VMX_INVALID_VMCS_FIELD)", %0          \n\t"
+       "movl   $" STR(VERR_VMX_INVALID_VMCS_FIELD)", %0         \n\t"
        "2:                                                      \n\t"
        :"=rm"(rc)
        :"0"(VINF_SUCCESS),
@@ -1607,14 +1607,14 @@
     int rc = VINF_SUCCESS;
 # if RT_INLINE_ASM_GNU_STYLE
     __asm__ __volatile__ (
-       "movl   $"STR(VINF_SUCCESS)", %0                          \n\t"
+       "movl   $" STR(VINF_SUCCESS)", %0                         \n\t"
        ".byte  0x0F, 0x78, 0xc2        # VMREAD eax, edx         \n\t"
        "ja     2f                                                \n\t"
        "je     1f                                                \n\t"
-       "movl   $"STR(VERR_VMX_INVALID_VMCS_PTR)", %0             \n\t"
+       "movl   $" STR(VERR_VMX_INVALID_VMCS_PTR)", %0            \n\t"
        "jmp    2f                                                \n\t"
        "1:                                                       \n\t"
-       "movl   $"STR(VERR_VMX_INVALID_VMCS_FIELD)", %0           \n\t"
+       "movl   $" STR(VERR_VMX_INVALID_VMCS_FIELD)", %0          \n\t"
        "2:                                                       \n\t"
        :"=&r"(rc),
         "=d"(*pData)
