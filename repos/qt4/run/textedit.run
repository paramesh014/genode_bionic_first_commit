#
# Build
#

set build_components {
	core
	init
	drivers/framebuffer
	drivers/timer
	server/nitpicker
	app/examples/textedit
}

set use_sd_card_driver [expr [have_spec omap4] || [have_spec exynos5]]
set use_usb_driver     [expr [have_spec omap4] || [have_spec exynos5]]

lappend_if $use_sd_card_driver build_components drivers/sd_card
lappend_if $use_usb_driver     build_components drivers/usb
lappend_if [have_spec     pci] build_components drivers/pci
lappend_if [have_spec     pci] build_components drivers/atapi
lappend_if [have_spec    acpi] build_components drivers/acpi
lappend_if [have_spec     ps2] build_components drivers/input/ps2
lappend_if [have_spec   linux] build_components server/ram_fs
lappend_if [expr ![have_spec linux]] build_components server/ffat_fs
lappend_if [have_spec gpio]    build_components drivers/gpio

build $build_components
create_boot_directory

#
# Generate config
#

set config {
<config>
	<parent-provides>
		<service name="ROM"/>
		<service name="RAM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="CAP"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
		<service name="SIGNAL"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route> }

append_if [have_spec sdl] config {
	<start name="fb_sdl">
		<resource name="RAM" quantum="4M"/>
		<provides>
			<service name="Input"/>
			<service name="Framebuffer"/>
		</provides>
	</start>}

append_if [have_spec pci] config {
	<start name="pci_drv">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="PCI"/></provides>
	</start>
	<start name="atapi_drv">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Block"/> </provides>
		<config ata="yes" />
	</start>}

append_if [have_spec gpio] config {
	<start name="gpio_drv">
		<resource name="RAM" quantum="4M"/>
		<provides><service name="Gpio"/></provides>
		<config/>
	</start>}

append_if $use_sd_card_driver config {
	<start name="sd_card_drv">
		<resource name="RAM" quantum="1M" />
		<provides><service name="Block"/></provides>
	</start>}

append_if [have_spec framebuffer] config {
	<start name="fb_drv">
		<resource name="RAM" quantum="4M"/>
		<provides><service name="Framebuffer"/></provides>
	</start>}

append_if [expr ![have_spec ps2] && [have_spec usb]] config {
	<start name="usb_drv">
		<resource name="RAM" quantum="12M"/>
		<provides><service name="Input"/></provides>
		<config> <hid/> </config>
	</start>}

append_if [have_spec ps2] config {
	<start name="ps2_drv">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Input"/></provides>
	</start>}

append_if [have_spec linux] config {
	<start name="ram_fs">
		<resource name="RAM" quantum="10M"/>
		<provides><service name="File_system"/></provides>
		<config>
			<!-- constrain sessions according to their labels -->
			<policy label="textedit" root="/" writeable="yes" />
			<policy label="textedit2" root="/" writeable="yes" />
		</config>
	</start>}

append_if [expr ![have_spec linux]] config {
	<start name="ffat_fs">
		<resource name="RAM" quantum="10M"/>
		<provides><service name="File_system"/></provides>
		<config>
			<!-- constrain sessions according to their labels -->
			<policy label="textedit" root="/" writeable="yes" />
		</config>
	</start>}

append config {
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>
	<start name="nitpicker">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Nitpicker"/></provides>
	</start>
	<start name="textedit">
		<resource name="RAM" quantum="40M"/>
		<config xpos="3" ypos="0" width="500" height="710">
			<libc>
				<vfs> <fs/> </vfs>
			</libc>
		</config>
	</start>
	<start name="textedit2">
		<binary name="textedit" />
		<resource name="RAM" quantum="40M"/>
		<config xpos="512" ypos="0" width="500" height="710">
			<libc>
				<vfs> <fs/> </vfs>
			</libc>
		</config>
	</start>
</config>
}

install_config $config

#
# Boot modules
#

# generic modules
set boot_modules {
	core
	init
	timer
	nitpicker
	textedit
	dejavusans.lib.so
	freetype.lib.so
	ld.lib.so
	libc.lib.so
	libc_lock_pipe.lib.so
	libm.lib.so
	libpng.lib.so
	jpeg.lib.so
	qt_core.lib.so
	qt_gui.lib.so
	zlib.lib.so
	stdcxx.lib.so
}

# platform-specific modules
lappend_if [have_spec linux]         boot_modules fb_sdl
lappend_if [have_spec linux]         boot_modules ram_fs
lappend_if [expr ![have_spec linux]] boot_modules ffat_fs
lappend_if [have_spec pci]           boot_modules pci_drv
lappend_if [have_spec pci]           boot_modules atapi_drv
lappend_if [have_spec ps2]           boot_modules ps2_drv
lappend_if [have_spec framebuffer]   boot_modules fb_drv
lappend_if $use_sd_card_driver       boot_modules sd_card_drv
lappend_if $use_usb_driver           boot_modules usb_drv
lappend_if [have_spec gpio]          boot_modules gpio_drv

build_boot_image $boot_modules

set disk_image "bin/test.hda"
set cmd "dd if=/dev/zero of=$disk_image bs=1024 count=65536"
puts "creating disk image: $cmd"
catch { exec sh -c $cmd }

set cmd "mkfs.vfat -F32 $disk_image"
puts "formating disk image with vfat file system: $cmd"
catch { exec sh -c $cmd }

append_if [have_spec   pci] qemu_args " -hda $disk_image -boot order=d "

append qemu_args " -m 128"

run_genode_until forever
